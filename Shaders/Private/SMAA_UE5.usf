#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
//#include "/Engine/Private/ScreenPass.ush"
//#include "/Engine/Private/DeferredShadingCommon.ush"
#include "/Engine/Private/TemporalSuperResolution/TSRCommon.ush"


///// ///// ////////// ///// /////
// SMAA Macros from Leszek Godlewski
//

/**
 * Copyright (C) 2015-2016 Leszek Godlewski
 * Copyright (C) 2022 Acinonyx Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to
 * do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software. As clarification, there
 * is no requirement that the copyright notice and permission be included in
 * binary distributions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
SamplerState BilinearTextureSampler;
SamplerState PointTextureSampler;

// Porting macros
#define SMAA_CUSTOM_SL
#define SMAATexture2D(tex) Texture2D tex
// Don't define multisampled textures, we can't really use them in UE4.
//#define SMAATexture2DMS2(tex) Texture2DMS<float4, 2> tex
#define SMAATexturePass2D(tex) tex
#define SMAASampleLevelZero(tex, coord) Texture2DSampleLevel(tex, BilinearTextureSampler, coord, 0)
#define SMAASampleLevelZeroPoint(tex, coord) Texture2DSampleLevel(tex, PointTextureSampler, coord, 0)
#define SMAASampleLevelZeroOffset(tex, coord, offset) tex.SampleLevel(BilinearTextureSampler, coord, 0, offset)
#define SMAASample(tex, coord) Texture2DSample(tex, BilinearTextureSampler, coord)
#define SMAASamplePoint(tex, coord) Texture2DSample(tex, PointTextureSampler, coord)
#define SMAASampleOffset(tex, coord, offset) tex.Sample(BilinearTextureSampler, coord, offset)
#define SMAA_FLATTEN FLATTEN
#define SMAA_BRANCH BRANCH
//#define SMAALoad(tex, pos, sample) tex.Load(pos, sample)
#if FEATURE_LEVEL >= FEATURE_LEVEL_SM5
	#define SMAAGather(tex, coord) tex.Gather(BilinearTextureSampler, coord, 0)
#endif

// Viewport Metrics
float4 ViewportMetrics;
#define SMAA_RT_METRICS	ViewportMetrics

// Switching from UE Macros to SMAA Macros
#if SMAA_PRESET == 0
#define SMAA_PRESET_LOW 1
#elif SMAA_PRESET == 1
#define SMAA_PRESET_MEDIUM 1
#elif SMAA_PRESET == 2
#define SMAA_PRESET_HIGH 1
#elif SMAA_PRESET == 3
#define SMAA_PRESET_ULTRA 1
#elif SMAA_PRESET > 3
#define SMAA_PRESET_ULTRA 1
#endif


#ifndef SMAA_PREDICATION
#define SMAA_PREDICATION 0
#endif

#ifndef WORLD_MAX
#define WORLD_MAX 2097152.0
#endif

#ifndef SMAA_REPROJECTION_WEIGHT_SCALE
#define SMAA_REPROJECTION_WEIGHT_SCALE 0.f
#endif

#ifndef SMAA_REPROJECTION_WEIGHT_BASE
#define SMAA_REPROJECTION_WEIGHT_BASE 0.5f
#endif

#if ENGINE_MINOR_VERSION >= 5
// Shader Functions
// Missing Function: Luma4
// Ensure Luma4 is defined. Placeholder implementation below:
float Luma4(float3 rgb)
{
	return (rgb.g * 2.0) + (rgb.r + rgb.b);
}

// FSMAAEdgeDetectionCS: Main edge detection shader
void FSMAAEdgeDetectionCS(
	Texture2D Texture,
	SamplerState PointTextureSampler,
	float2 UV,
	out float3 Output
)
{
	// Utilize Luma4 for edge detection
	Output = Luma4(Texture2DSample(Texture, PointTextureSampler, UV).rgb);
}

// FSMAATemporalResolveCS: Temporal resolve shader
// Missing Function: ComputeStaticVelocity
// Ensure ComputeStaticVelocity is defined. Placeholder implementation below:
float2 ComputeStaticVelocity(float2 AsScreen, float Depth)
{
	// Example implementation
	// Placeholder velocity computation logic
	return float2(AsScreen.x * Depth, AsScreen.y * Depth);
}

// Temporal Resolve Shader Implementation
void FSMAATemporalResolveCS(
	Texture2D Texture,
	SamplerState PointTextureSampler,
	float2 AsScreen,
	float Depth,
	out float2 Velocity
)
{
	Velocity = ComputeStaticVelocity(AsScreen, Depth).xy;
}
#endif

// Modified to take a texture
float2 GetVelocity(SMAATexture2D(DepthTexture2D), SMAATexture2D(VelocityTexture2D), float2 UV)
{
	float2 Velocity;
	float4 Foreground = Texture2DSampleLevel(VelocityTexture2D, PointTextureSampler, UV, 0);

	bool bHasForegroundVelocity = Foreground.x > 0;
	if (bHasForegroundVelocity)
	{
		// Decode dynamic velocity from texture
		Velocity = DecodeVelocityFromTexture(Foreground).xy;
	}
	else
	{
		// Velocity texture has foreground (dynamic: movable or materials with WPO) object velocities only,
		// so use temporal reprojection to compute background velocity

		float Depth = Texture2DSampleLevel(DepthTexture2D, PointTextureSampler, UV, 0).r;
        float2 AsScreen = ViewportUVToScreenPos(UV);
        Velocity = ComputeStaticVelocity(AsScreen, Depth);
	}

	return Velocity;
}

#define AA_CROSS 2
// Epic's GetVelocity
float2 GetVelocityTAA(SMAATexture2D(DepthTexture2D), SMAATexture2D(VelocityTexture2D), float2 UV)
{
    float2 Velocity;
    float2 VelocityOffset = float2(0.0, 0.0);
    float Depth = DepthTexture2D.SampleLevel(PointTextureSampler, UV, 0, int2(0,0)).r;
    //float Depth = Texture2DSampleLevel(DepthTexture2D, PointTextureSampler, UV, 0).r;
	#if AA_CROSS
	{
		// For motion vector, use camera/dynamic motion from min depth pixel in pattern around pixel.
		// This enables better quality outline on foreground against different motion background.
		// Larger 2 pixel distance "x" works best (because AA dilates surface).
		float4 Depths;
        Depths.x = DepthTexture2D.SampleLevel(PointTextureSampler, UV, 0, int2(-AA_CROSS, -AA_CROSS)).r;
        Depths.y = DepthTexture2D.SampleLevel(PointTextureSampler, UV, 0, int2(AA_CROSS, -AA_CROSS)).r;
        Depths.z = DepthTexture2D.SampleLevel(PointTextureSampler, UV, 0, int2(-AA_CROSS, AA_CROSS)).r;
        Depths.w = DepthTexture2D.SampleLevel(PointTextureSampler, UV, 0, int2(AA_CROSS, AA_CROSS)).r;


		float2 DepthOffset = float2(AA_CROSS, AA_CROSS);
		float DepthOffsetXx = float(AA_CROSS);
		#if HAS_INVERTED_Z_BUFFER
			// Nearest depth is the largest depth (depth surface 0=far, 1=near).
			if(Depths.x > Depths.y) 
			{
				DepthOffsetXx = -AA_CROSS;
			}
			if(Depths.z > Depths.w) 
			{
				DepthOffset.x = -AA_CROSS;
			}
			float DepthsXY = max(Depths.x, Depths.y);
			float DepthsZW = max(Depths.z, Depths.w);
			if(DepthsXY > DepthsZW) 
			{
				DepthOffset.y = -AA_CROSS;
				DepthOffset.x = DepthOffsetXx; 
			}
			float DepthsXYZW = max(DepthsXY, DepthsZW);
			if(DepthsXYZW > Depth) 
			{
				VelocityOffset = DepthOffset * ViewportMetrics.xy;
				Depth = DepthsXYZW;
			}
		#else // !HAS_INVERTED_Z_BUFFER
			#error Fix me!
		#endif // !HAS_INVERTED_Z_BUFFER
	}
	#endif	// AA_CROSS

	float4 Foreground = Texture2DSampleLevel(VelocityTexture2D, PointTextureSampler, UV + VelocityOffset, 0);

	bool bHasForegroundVelocity = Foreground.x > 0;
	if (bHasForegroundVelocity)
	{
		// Decode dynamic velocity from texture
		Velocity = DecodeVelocityFromTexture(Foreground).xy;
	}
	else
	{
		// Velocity texture has foreground (dynamic: movable or materials with WPO) object velocities only,
		// so use temporal reprojection to compute background velocity

        float2 AsScreen = ViewportUVToScreenPos(UV);
        Velocity = ComputeStaticVelocity(AsScreen, Depth).xy;
	}

	return Velocity;
}


// Define before reference implementation by Jimenez et al.
// [https://dl.acm.org/doi/abs/10.1111/j.1467-8659.2012.03014.x]
#include "SMAAReference.usf"

/**
 * Copyright (C) 2013 Jorge Jimenez (jorge@iryoku.com)
 * Copyright (C) 2013 Jose I. Echevarria (joseignacioechevarria@gmail.com)
 * Copyright (C) 2013 Belen Masia (bmasia@unizar.es)
 * Copyright (C) 2013 Fernando Navarro (fernandn@microsoft.com)
 * Copyright (C) 2013 Diego Gutierrez (diegog@unizar.es)
 * Copyright (C) 2022 Acinonyx Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to
 * do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software. As clarification, there
 * is no requirement that the copyright notice and permission be included in
 * binary distributions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


float GetLuma(SMAATexture2D(Texture), float2 UV)
{
#if 0
    float3 CentreTap = SMAASamplePoint(Texture, UV).rgb;
	float CenterLuma = dot(CentreTap, float3(0.299f, 0.587f, 0.114f));
	float L = CenterLuma / (0.5 + CenterLuma);

    return L;
#else
    return Luma4(SMAASamplePoint(Texture, UV).rgb);
#endif


}


float2 SMAALumaEdgeDetectionCS(float2 texcoord,
                               SMAATexture2D(colorTex)
#if SMAA_PREDICATION
                               , SMAATexture2D(predicationTex)
#endif
                               )
{
    float4 offset[3];
    // We need to modify the entry functions since we're in compute shader
    offset[0] = mad(SMAA_RT_METRICS.xyxy, float4(-1.0, 0.0, 0.0, -1.0), texcoord.xyxy);
    offset[1] = mad(SMAA_RT_METRICS.xyxy, float4( 1.0, 0.0, 0.0,  1.0), texcoord.xyxy);
    offset[2] = mad(SMAA_RT_METRICS.xyxy, float4(-2.0, 0.0, 0.0, -2.0), texcoord.xyxy);

    // Calculate the threshold:
    #if SMAA_PREDICATION
    float2 threshold = SMAACalculatePredicatedThreshold(texcoord, offset, SMAATexturePass2D(predicationTex));
    #else
    float2 threshold = float2(SMAA_THRESHOLD, SMAA_THRESHOLD);
    #endif

    // The default approach is to use REC709 primaries
    // Calculate lumas:
    // float3 weights = float3(0.2126, 0.7152, 0.0722);
    //float L = dot(SMAASamplePoint(colorTex, texcoord).rgb, weights);
    // float3 CentreTap = SMAASamplePoint(colorTex, texcoord).rgb;
	// float CenterLuma = dot(CentreTap, float3(0.299f, 0.587f, 0.114f));
	// float L = CenterLuma / (0.5 + CenterLuma);
    float L = GetLuma(colorTex, texcoord);

    // float Lleft = dot(SMAASamplePoint(colorTex, offset[0].xy).rgb, weights);
    float Lleft = GetLuma(colorTex, offset[0].xy);
    // float Ltop  = dot(SMAASamplePoint(colorTex, offset[0].zw).rgb, weights);
    float Ltop = GetLuma(colorTex, offset[0].zw);

    // We do the usual threshold:
    float4 delta;
    delta.xy = abs(L - float2(Lleft, Ltop));
    float2 edges = step(threshold, delta.xy);

    // Then discard if there is no edge:
    if (dot(edges, float2(1.0, 1.0)) == 0.0)
        return float2(0,0);

    // Calculate right and bottom deltas:
    // float Lright = dot(SMAASamplePoint(colorTex, offset[1].xy).rgb, weights);
    // float Lbottom  = dot(SMAASamplePoint(colorTex, offset[1].zw).rgb, weights);

    float Lright = GetLuma(colorTex, offset[1].xy);
    float Lbottom = GetLuma(colorTex, offset[1].zw);

    delta.zw = abs(L - float2(Lright, Lbottom));

    // Calculate the maximum delta in the direct neighborhood:
    float2 maxDelta = max(delta.xy, delta.zw);

    // Calculate left-left and top-top deltas:
    // float Lleftleft = dot(SMAASamplePoint(colorTex, offset[2].xy).rgb, weights);
    // float Ltoptop = dot(SMAASamplePoint(colorTex, offset[2].zw).rgb, weights);
    float Lleftleft = GetLuma(colorTex, offset[2].xy);
    float Ltoptop = GetLuma(colorTex, offset[2].zw);
    delta.zw = abs(float2(Lleft, Ltop) - float2(Lleftleft, Ltoptop));

    // Calculate the final maximum delta:
    maxDelta = max(maxDelta.xy, delta.zw);
    float finalDelta = max(maxDelta.x, maxDelta.y);

    // Local contrast adaptation:
    edges.xy *= step(finalDelta, SMAA_LOCAL_CONTRAST_ADAPTATION_FACTOR * delta.xy);

    return edges;
}

float2 SMAADepthEdgeDetectionCS(float2 texcoord,
                                SMAATexture2D(depthTex))
{
    float4 offset[3];
    // We need to modify the entry functions since we're in compute shader
    offset[0] = mad(SMAA_RT_METRICS.xyxy, float4(-1.0, 0.0, 0.0, -1.0), texcoord.xyxy);
    offset[1] = mad(SMAA_RT_METRICS.xyxy, float4( 1.0, 0.0, 0.0,  1.0), texcoord.xyxy);
    offset[2] = mad(SMAA_RT_METRICS.xyxy, float4(-2.0, 0.0, 0.0, -2.0), texcoord.xyxy);

    float3 neighbours = SMAAGatherNeighbours(texcoord, offset, SMAATexturePass2D(depthTex));
    float2 delta = abs(neighbours.xx - float2(neighbours.y, neighbours.z));
    float2 edges = step(SMAA_DEPTH_THRESHOLD, delta);

    if (dot(edges, float2(1.0, 1.0)) == 0.0)
        return float2(0,0);

    return edges;
}

float2 SMAAColorEdgeDetectionCS(float2 texcoord,
                                SMAATexture2D(colorTex)
                                #if SMAA_PREDICATION
                                , SMAATexture2D(predicationTex)
                                #endif
                                )
{
    float4 offset[3];
    // We need to modify the entry functions since we're in compute shader
    offset[0] = mad(SMAA_RT_METRICS.xyxy, float4(-1.0, 0.0, 0.0, -1.0), texcoord.xyxy);
    offset[1] = mad(SMAA_RT_METRICS.xyxy, float4( 1.0, 0.0, 0.0,  1.0), texcoord.xyxy);
    offset[2] = mad(SMAA_RT_METRICS.xyxy, float4(-2.0, 0.0, 0.0, -2.0), texcoord.xyxy);

    // Calculate the threshold:
    #if SMAA_PREDICATION
    float2 threshold = SMAACalculatePredicatedThreshold(texcoord, offset, predicationTex);
    #else
    float2 threshold = float2(SMAA_THRESHOLD, SMAA_THRESHOLD);
    #endif

    // Calculate color deltas:
    float4 delta;
    float3 C = SMAASamplePoint(colorTex, texcoord).rgb;

    float3 Cleft = SMAASamplePoint(colorTex, offset[0].xy).rgb;
    float3 t = abs(C - Cleft);
    delta.x = max(max(t.r, t.g), t.b);

    float3 Ctop  = SMAASamplePoint(colorTex, offset[0].zw).rgb;
    t = abs(C - Ctop);
    delta.y = max(max(t.r, t.g), t.b);

    // We do the usual threshold:
    float2 edges = step(threshold, delta.xy);

    // Then discard if there is no edge:
    if (dot(edges, float2(1.0, 1.0)) == 0.0)
        return float2(0,0);

    // Calculate right and bottom deltas:
    float3 Cright = SMAASamplePoint(colorTex, offset[1].xy).rgb;
    t = abs(C - Cright);
    delta.z = max(max(t.r, t.g), t.b);

    float3 Cbottom  = SMAASamplePoint(colorTex, offset[1].zw).rgb;
    t = abs(C - Cbottom);
    delta.w = max(max(t.r, t.g), t.b);

    // Calculate the maximum delta in the direct neighborhood:
    float2 maxDelta = max(delta.xy, delta.zw);

    // Calculate left-left and top-top deltas:
    float3 Cleftleft  = SMAASamplePoint(colorTex, offset[2].xy).rgb;
    t = abs(C - Cleftleft);
    delta.z = max(max(t.r, t.g), t.b);

    float3 Ctoptop = SMAASamplePoint(colorTex, offset[2].zw).rgb;
    t = abs(C - Ctoptop);
    delta.w = max(max(t.r, t.g), t.b);

    // Calculate the final maximum delta:
    maxDelta = max(maxDelta.xy, delta.zw);
    float finalDelta = max(maxDelta.x, maxDelta.y);

    // Local contrast adaptation:
    edges.xy *= step(finalDelta, SMAA_LOCAL_CONTRAST_ADAPTATION_FACTOR * delta.xy);

    return edges;
}





float4 SMAABlendingWeightCalculationCS(float2 texcoord,
                                       SMAATexture2D(edgesTex),
                                       SMAATexture2D(areaTex),
                                       SMAATexture2D(searchTex),
                                       float4 subsampleIndices)
{
    float2 pixcoord = texcoord * SMAA_RT_METRICS.zw;
    float4 offset[3];

    // We will use these offsets for the searches later on (see @PSEUDO_GATHER4):
    offset[0] = mad(SMAA_RT_METRICS.xyxy, float4(-0.25, -0.125,  1.25, -0.125), texcoord.xyxy);
    offset[1] = mad(SMAA_RT_METRICS.xyxy, float4(-0.125, -0.25, -0.125,  1.25), texcoord.xyxy);

    // And these for the searches, they indicate the ends of the loops:
    offset[2] = mad(SMAA_RT_METRICS.xxyy,
                    float4(-2.0, 2.0, -2.0, 2.0) * MaxSearchSteps,
                    float4(offset[0].xz, offset[1].yw));


     // Just pass zero for SMAA 1x, see @SUBSAMPLE_INDICES.
    float4 weights = float4(0.0, 0.0, 0.0, 0.0);

    float2 e = SMAASample(edgesTex, texcoord).rg;

    SMAA_BRANCH
    if (e.g > 0.0) { // Edge at north
        #if !defined(SMAA_DISABLE_DIAG_DETECTION)
        // Diagonals have both north and west edges, so searching for them in
        // one of the boundaries is enough.
        weights.rg = SMAACalculateDiagWeights(SMAATexturePass2D(edgesTex), SMAATexturePass2D(areaTex), texcoord, e, subsampleIndices);

        // We give priority to diagonals, so if we find a diagonal we skip 
        // horizontal/vertical processing.
        SMAA_BRANCH
        if (weights.r == -weights.g) { // weights.r + weights.g == 0.0
        #endif

        float2 d;

        // Find the distance to the left:
        float3 coords;
        coords.x = SMAASearchXLeft(SMAATexturePass2D(edgesTex), SMAATexturePass2D(searchTex), offset[0].xy, offset[2].x);
        coords.y = offset[1].y; // offset[1].y = texcoord.y - 0.25 * SMAA_RT_METRICS.y (@CROSSING_OFFSET)
        d.x = coords.x;

        // Now fetch the left crossing edges, two at a time using bilinear
        // filtering. Sampling at -0.25 (see @CROSSING_OFFSET) enables to
        // discern what value each edge has:
        float e1 = SMAASampleLevelZero(edgesTex, coords.xy).r;

        // Find the distance to the right:
        coords.z = SMAASearchXRight(SMAATexturePass2D(edgesTex), SMAATexturePass2D(searchTex), offset[0].zw, offset[2].y);
        d.y = coords.z;

        // We want the distances to be in pixel units (doing this here allow to
        // better interleave arithmetic and memory accesses):
        d = abs(round(mad(SMAA_RT_METRICS.zz, d, -pixcoord.xx)));

        // SMAAArea below needs a sqrt, as the areas texture is compressed
        // quadratically:
        float2 sqrt_d = sqrt(d);

        // Fetch the right crossing edges:
        float e2 = SMAASampleLevelZeroOffset(edgesTex, coords.zy, int2(1, 0)).r;

        // Ok, we know how this pattern looks like, now it is time for getting
        // the actual area:
        weights.rg = SMAAArea(SMAATexturePass2D(areaTex), sqrt_d, e1, e2, subsampleIndices.y);

        // Fix corners:
        coords.y = texcoord.y;
        SMAADetectHorizontalCornerPattern(SMAATexturePass2D(edgesTex), weights.rg, coords.xyzy, d);

        #if !defined(SMAA_DISABLE_DIAG_DETECTION)
        } else
            e.r = 0.0; // Skip vertical processing.
        #endif
    }

    SMAA_BRANCH
    if (e.r > 0.0) { // Edge at west
        float2 d;

        // Find the distance to the top:
        float3 coords;
        coords.y = SMAASearchYUp(SMAATexturePass2D(edgesTex), SMAATexturePass2D(searchTex), offset[1].xy, offset[2].z);
        coords.x = offset[0].x; // offset[1].x = texcoord.x - 0.25 * SMAA_RT_METRICS.x;
        d.x = coords.y;

        // Fetch the top crossing edges:
        float e1 = SMAASampleLevelZero(edgesTex, coords.xy).g;

        // Find the distance to the bottom:
        coords.z = SMAASearchYDown(SMAATexturePass2D(edgesTex), SMAATexturePass2D(searchTex), offset[1].zw, offset[2].w);
        d.y = coords.z;

        // We want the distances to be in pixel units:
        d = abs(round(mad(SMAA_RT_METRICS.ww, d, -pixcoord.yy)));

        // SMAAArea below needs a sqrt, as the areas texture is compressed 
        // quadratically:
        float2 sqrt_d = sqrt(d);

        // Fetch the bottom crossing edges:
        float e2 = SMAASampleLevelZeroOffset(edgesTex, coords.xz, int2(0, 1)).g;

        // Get the area for this direction:
        weights.ba = SMAAArea(SMAATexturePass2D(areaTex), sqrt_d, e1, e2, subsampleIndices.x);

        // Fix corners:
        coords.x = texcoord.x;
        SMAADetectVerticalCornerPattern(SMAATexturePass2D(edgesTex), weights.ba, coords.xyxz, d);
    }

    return weights;
}

float4 SMAANeighborhoodBlendingCS(float2 texcoord,
                                  SMAATexture2D(colorTex),
                                  SMAATexture2D(blendTex)
                                  #if SMAA_REPROJECTION
                                  , SMAATexture2D(velocityTex)
                                  , SMAATexture2D(depthTex)
                                  #endif
                                  )
{
    // Fetch the blending weights for current pixel:
    float4 offset = mad(SMAA_RT_METRICS.xyxy, float4( 1.0, 0.0, 0.0,  1.0), texcoord.xyxy);
    float4 a;
    a.x = SMAASample(blendTex, offset.xy).a; // Right
    a.y = SMAASample(blendTex, offset.zw).g; // Top
    a.wz = SMAASample(blendTex, texcoord).xz; // Bottom / Left

    // Is there any blending weight with a value greater than 0.0?
    SMAA_BRANCH
    if (dot(a, float4(1.0, 1.0, 1.0, 1.0)) < 1e-5) {
        float4 color = SMAASampleLevelZero(colorTex, texcoord);

        #if SMAA_REPROJECTION
            #if 1
                float2 velocity = GetVelocityTAA(depthTex, velocityTex, texcoord);
            #else
                float2 velocity = SMAA_DECODE_VELOCITY(SMAASampleLevelZero(velocityTex, texcoord));
            #endif

            // Pack velocity into the alpha channel:
            color.a = sqrt(5.0 * length(velocity));
        #endif

        return color;
    } else {
        bool h = max(a.x, a.z) > max(a.y, a.w); // max(horizontal) > max(vertical)

        // Calculate the blending offsets:
        float4 blendingOffset = float4(0.0, a.y, 0.0, a.w);
        float2 blendingWeight = a.yw;
        SMAAMovc(bool4(h, h, h, h), blendingOffset, float4(a.x, 0.0, a.z, 0.0));
        SMAAMovc(bool2(h, h), blendingWeight, a.xz);
        blendingWeight /= dot(blendingWeight, float2(1.0, 1.0));

        // Calculate the texture coordinates:
        float4 blendingCoord = mad(blendingOffset, float4(SMAA_RT_METRICS.xy, -SMAA_RT_METRICS.xy), texcoord.xyxy);

        // We exploit bilinear filtering to mix current pixel with the chosen
        // neighbor:
        float4 color = blendingWeight.x * SMAASampleLevelZero(colorTex, blendingCoord.xy);
        color += blendingWeight.y * SMAASampleLevelZero(colorTex, blendingCoord.zw);

        #if SMAA_REPROJECTION
            // Antialias velocity for proper reprojection in a later stage:
            #if 1
                float2 velocity = GetVelocityTAA(depthTex, velocityTex, blendingCoord.xy);
                velocity += GetVelocityTAA(depthTex, velocityTex, blendingCoord.zw);
            #else
                float2 velocity = blendingWeight.x * SMAA_DECODE_VELOCITY(SMAASampleLevelZero(velocityTex, blendingCoord.xy));
                velocity += blendingWeight.y * SMAA_DECODE_VELOCITY(SMAASampleLevelZero(velocityTex, blendingCoord.zw));
            #endif

            // Pack velocity into the alpha channel:
            color.a = sqrt(5.0 * length(velocity));
        #endif

        return color;
    }
}

//-----------------------------------------------------------------------------
// Temporal Resolve Shader (Optional Pass)

float4 SMAAResolveCS(float2 texcoord,
                     SMAATexture2D(currentColorTex),
                     SMAATexture2D(previousColorTex)
                     #if SMAA_REPROJECTION
                     , SMAATexture2D(velocityTex),
                     SMAATexture2D(depthTex)
                     #endif
                     ) {
    #if SMAA_REPROJECTION
        // Velocity is assumed to be calculated for motion blur, so we need to
        // inverse it for reprojection:
        #if 1
            float2 velocity = float2(-0.5, 0.5f) * GetVelocityTAA(depthTex, velocityTex, texcoord);
        #else
            float2 velocity = -SMAA_DECODE_VELOCITY(SMAASamplePoint(velocityTex, texcoord).rg);
        #endif

        // Fetch current pixel:
        float4 current = SMAASamplePoint(currentColorTex, texcoord);

        // Uncomment to reuse the velocity calculated above rather than the AA'd
        // velocity in the alpha channel
        //current.a = sqrt(5.0 * length(velocity));

        // Reproject current coordinates and fetch previous pixel:
        float2 Limit = min(float2(1,1), max(float2(0,0), texcoord + velocity));
        float4 previous = SMAASamplePoint(previousColorTex, Limit);

        // Check offscreen. Don't project if we are
        float2 ScreenPos = ViewportUVToScreenPos(texcoord) + velocity;
        bool OffScreen = max(abs(ScreenPos.x), abs(ScreenPos.y)) >= 1.0;

        // Attenuate the previous pixel if the velocity is different:
        float delta = abs(current.a * current.a - previous.a * previous.a) / 5.0;
        float weight = SMAA_REPROJECTION_WEIGHT_BASE * saturate(1.0 - sqrt(delta) * SMAA_REPROJECTION_WEIGHT_SCALE);

        // Blend the pixels according to the calculated weight:
        SMAA_FLATTEN if (OffScreen) weight = 0;

        return lerp(current, previous, weight);

    #else
        // Just blend the pixels:
        float4 current = SMAASamplePoint(currentColorTex, texcoord);
        float4 previous = SMAASamplePoint(previousColorTex, texcoord);
        return lerp(current, previous, SMAA_REPROJECTION_WEIGHT_BASE);
    #endif
}